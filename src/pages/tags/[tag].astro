---
import NavLayout from "../../layouts/NavLayout.astro";
import allProjects from "../../store/projects";
import { skills } from "../index.astro";
import type { Post, Project } from "../../utils/types";
import type { MDXInstance } from "astro";
import PostCard from "../../components/PostCard.astro";
import ProjectCard from "../../components/ProjectCard.astro";

export interface Props {
  projects: Project[];
  posts: MDXInstance<Post>[];
}

export async function getStaticPaths() {
  const allPosts = await Astro.glob("../posts/*.mdx");

  const tags = new Set(skills);
  for (const post of allPosts) {
    for (const tag of post.frontmatter.tags) {
      tags.add(tag);
    }
  }
  for (const project of allProjects) {
    for (const tag of project.tags) {
      tags.add(tag);
    }
  }

  return [...tags].map((tag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.frontmatter.tags.includes(tag)
    );
    const filteredProjects = allProjects.filter((project) =>
      project.tags.includes(tag as string)
    );
    return {
      params: { tag },
      props: { posts: filteredPosts, projects: filteredProjects }
    };
  });
}

const { tag } = Astro.params;
const { posts, projects } = Astro.props;
---

<NavLayout title={tag || ""}>
  <h1>Tag <span class="primary">=</span> `{tag}`</h1>
  <h2>Posts</h2>
  <div class="card-grid">
    {
      posts.length > 0 ? (
        posts.map((post) => <PostCard post={post} />)
      ) : (
        <p>No posts found.</p>
      )
    }
  </div>
  <h2>Projects</h2>
  <div class="card-grid">
    {
      projects.length > 0 ? (
        projects.map((project) => <ProjectCard project={project} />)
      ) : (
        <p>No projects found.</p>
      )
    }
  </div>
</NavLayout>

<style>
  h1,
  h2 {
    text-align: center;
  }
  .card-grid {
    display: flex;
    align-items: flex-start;
    justify-content: center;
    column-gap: var(--pico-block-spacing-vertical);
    flex-wrap: wrap;
  }
</style>
